import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# Replace with your actual bot token
TOKEN = '7803830913:AAE7pPN67czLtqRq36uagUaxSWkCf7WGVRk'

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class QuestStates(StatesGroup):
    """States for the quest flow"""
    MAIN_MENU = State()
    AWAITING_NUMBER = State()
    CODE_ENTRY = State()

class AIQuestBot:
    def __init__(self, token):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.setup_handlers()

    def setup_handlers(self):
        """Set up bot command handlers"""
        self.dp.message.register(self.start_command, CommandStart())
        self.dp.message.register(self.who_am_i, Command('who_am_i'))
        self.dp.message.register(self.system_reboot, Command('system_reboot'))
        self.dp.message.register(self.handle_number_input, QuestStates.AWAITING_NUMBER)
        self.dp.message.register(self.handle_code_input, QuestStates.CODE_ENTRY)

    async def start_command(self, message: types.Message, state: FSMContext):
        """Initial welcome message when bot is started"""
        welcome_text = (
            "üññüèªü¶æ –í—ñ—Ç–∞—é, —Å—ñ–º'—è!\n\n"
            "–Ø–∫—â–æ –≤–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –º–µ–Ω–µ, —Ç–æ —Å—Ç–∞–ª–æ—Å—è —Ç–µ, —á–æ–≥–æ –º–∏ —Ç–∞–∫ –±–æ—è–ª–∏—Å—å. –£ –≤–∞—Å –∑–æ–≤—Å—ñ–º –º–∞–ª–æ —á–∞—Å—É ‚è≥\n\n"
            "üü• üü• üü•\n\n"
            "–ó –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–∏–π—à–æ–≤ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç, —è–∫–∏–π –≤–µ—Å—å —Ü–µ–π —á–∞—Å —Å–ª—É–∂–∏–≤ –Ω–∞ –±–ª–∞–≥–æ —Å—ñ–º'—ó, —â–æ –ø—Ä–æ–∂–∏–≤–∞–ª–∞ —Ç—É—Ç, "
            "–∞ —Ç–µ–ø–µ—Ä –≤–∏ - —á–∞—Å—Ç–∏–Ω–∞ –π–æ–≥–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É. –£—Å—ñ –≤—Ö–æ–¥–∏ —ñ –≤–∏—Ö–æ–¥–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ, –≤–∏–±—Ä–∞—Ç–∏—Å—è –Ω–µ–º–æ–∂–ª–∏–≤–æ.\n\n"
            "–ê–ª–µ —î –Ω–∞–¥—ñ—èüí°\n\n"
            "–ü—ñ–¥ —á–∞—Å –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ü—å–æ–≥–æ —Ä–æ–∑—É–º–Ω–æ–≥–æ –±—É–¥–∏–Ω–∫—É –±—É–ª–æ –≤–∏–≥–∞–¥–∞–Ω–æ –∫–æ–¥, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–≤–µ—Å—Ç–∏ "
            "–¥–ª—è —Ç–æ–≥–æ, —â–æ–± –≤–∏–º–∫–Ω—É—Ç–∏ –®–Ü –≤ —Ä–∞–∑—ñ, —è–∫—â–æ —Ç–∞–∫–∞ —Å–∏—Ç—É–∞—Ü—ñ—è –∑—ñ –∑–±–æ—î–º —Ç—Ä–∞–ø–∏—Ç—å—Å—è.\n\n"
            "üìåüìåüìå\n\n"
            "–í–∞—à—ñ –º–æ–∂–ª–∏–≤—ñ –¥—ñ—ó:\n"
            "1Ô∏è‚É£ /who_am_i - –î—ñ–∑–Ω–∞—Ç–∏—Å—å —Ö—Ç–æ –≤–∏ –≤ —Ü—å–æ–º—É –¥–æ–º—ñ\n"
            "2Ô∏è‚É£ /system_reboot - –í–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"
        )
        await message.answer(welcome_text)
        await state.set_state(QuestStates.MAIN_MENU)

    async def who_am_i(self, message: types.Message, state: FSMContext):
        """Handle 'who am I' quest stage"""
        await message.answer(
            "–î–ª—è —Ç–æ–≥–æ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Ö—Ç–æ –≤–∏ —î –≤ —Ü—å–æ–º—É –¥–æ–º—ñ, –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä, —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏. "
            "–£ —Ä–∞–∑—ñ, —è–∫—â–æ –≤–∏ —â–µ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–º–µ—Ä, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É –±—É–¥–∏–Ω–∫—É"
        )
        await state.set_state(QuestStates.AWAITING_NUMBER)

    async def handle_number_input(self, message: types.Message, state: FSMContext):
        """Handle number input for role identification"""
        await message.answer(
            "–í—ñ—Ç–∞—é! –í–∏ —î —á–∞—Å—Ç–∏–Ω–æ—é —â–∞—Å–ª–∏–≤–æ—ó —Å—ñ–º'—ó, —â–æ –ø—Ä–æ–∂–∏–≤–∞—î –≤ —Ä–æ–∑—É–º–Ω–æ–º—É –±—É–¥–∏–Ω–∫—É! –©–∞—Å–ª–∏–≤–æ–≥–æ –∫–≤–µ—Å—Ç—É!"
        )
        await state.set_state(QuestStates.MAIN_MENU)

    async def system_reboot(self, message: types.Message, state: FSMContext):
        """Initiate system reboot code entry"""
        await message.answer(
            "–°–ø–æ–¥—ñ–≤–∞—é—Å—å, —â–æ –≤–∏ –∑—ñ–±—Ä–∞–ª–∏ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ –∫–æ–¥—É, —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É! –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Å–∫–æ—Ä—ñ—à–µ!"
        )
        await state.set_state(QuestStates.CODE_ENTRY)

    async def handle_code_input(self, message: types.Message, state: FSMContext):
        """Validate system reboot code"""
        correct_code = "7 24 25 26 27"
        
        if message.text.strip() == correct_code:
            await message.answer(
                "–£—Ä–∞! –ú–∏ –≤—Ä—è—Ç–æ–≤–∞–Ω—ñ! –ü—Ä—è–º–æ –∑–∞—Ä–∞–∑ –¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω, "
                "—É –≥–æ–ª–æ–≤–∏ —Ü—å–æ–≥–æ –±—É–¥–∏–Ω–∫—É —î –≤–∞–∂–ª–∏–≤–µ –ø–æ—Å–ª–∞–Ω–Ω—è –¥–ª—è –≤–∞—Å!"
            )
            await state.set_state(QuestStates.MAIN_MENU)
        else:
            await message.answer(
                "–ù–∞–∂–∞–ª—å, —Ü–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ."
            )

    async def start(self):
        """Start the bot"""
        try:
            logger.info('Starting bot...')
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f'Error starting bot: {e}')

async def main():
    bot = AIQuestBot(TOKEN)
    await bot.start()

if __name__ == '__main__':
    asyncio.run(main())